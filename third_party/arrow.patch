From 25bff8ede6a979f1667808bec1b0a6d1d78afdd5 Mon Sep 17 00:00:00 2001
From: Tongxuan Liu <tongxuan.ltx@alibaba-inc.com>
Date: Mon, 13 Mar 2023 16:38:27 +0800
Subject: [PATCH] [AVX2] Add ARROW_HAVE_AVX2 for arrow to build code with AVX2.

---
 cpp/src/arrow/compute/exec/key_compare_avx2.cc |  2 ++
 cpp/src/arrow/compute/exec/key_encode_avx2.cc  |  2 ++
 cpp/src/arrow/compute/exec/key_hash_avx2.cc    |  2 ++
 cpp/src/arrow/compute/exec/key_map_avx2.cc     |  2 ++
 cpp/src/arrow/compute/exec/util_avx2.cc        |  2 ++
 cpp/src/arrow/filesystem/api.h                 |  3 ---
 cpp/src/arrow/filesystem/filesystem.cc         | 10 ----------
 7 files changed, 10 insertions(+), 13 deletions(-)

diff --git a/cpp/src/arrow/compute/exec/key_compare_avx2.cc b/cpp/src/arrow/compute/exec/key_compare_avx2.cc
index 6abdf6c..00e2fa6 100644
--- a/cpp/src/arrow/compute/exec/key_compare_avx2.cc
+++ b/cpp/src/arrow/compute/exec/key_compare_avx2.cc
@@ -15,7 +15,9 @@
 // specific language governing permissions and limitations
 // under the License.
 
+#if defined(ARROW_HAVE_AVX2)
 #include <immintrin.h>
+#endif
 
 #include "arrow/compute/exec/key_compare.h"
 #include "arrow/util/bit_util.h"
diff --git a/cpp/src/arrow/compute/exec/key_encode_avx2.cc b/cpp/src/arrow/compute/exec/key_encode_avx2.cc
index d875412..992b2ae 100644
--- a/cpp/src/arrow/compute/exec/key_encode_avx2.cc
+++ b/cpp/src/arrow/compute/exec/key_encode_avx2.cc
@@ -15,7 +15,9 @@
 // specific language governing permissions and limitations
 // under the License.
 
+#if defined(ARROW_HAVE_AVX2)
 #include <immintrin.h>
+#endif
 
 #include "arrow/compute/exec/key_encode.h"
 
diff --git a/cpp/src/arrow/compute/exec/key_hash_avx2.cc b/cpp/src/arrow/compute/exec/key_hash_avx2.cc
index b58db01..f210c6a 100644
--- a/cpp/src/arrow/compute/exec/key_hash_avx2.cc
+++ b/cpp/src/arrow/compute/exec/key_hash_avx2.cc
@@ -15,7 +15,9 @@
 // specific language governing permissions and limitations
 // under the License.
 
+#if defined(ARROW_HAVE_AVX2)
 #include <immintrin.h>
+#endif
 
 #include "arrow/compute/exec/key_hash.h"
 
diff --git a/cpp/src/arrow/compute/exec/key_map_avx2.cc b/cpp/src/arrow/compute/exec/key_map_avx2.cc
index a2efb4d..dc097f2 100644
--- a/cpp/src/arrow/compute/exec/key_map_avx2.cc
+++ b/cpp/src/arrow/compute/exec/key_map_avx2.cc
@@ -15,7 +15,9 @@
 // specific language governing permissions and limitations
 // under the License.
 
+#if defined(ARROW_HAVE_AVX2)
 #include <immintrin.h>
+#endif
 
 #include "arrow/compute/exec/key_map.h"
 
diff --git a/cpp/src/arrow/compute/exec/util_avx2.cc b/cpp/src/arrow/compute/exec/util_avx2.cc
index 8cf0104..92aaddd 100644
--- a/cpp/src/arrow/compute/exec/util_avx2.cc
+++ b/cpp/src/arrow/compute/exec/util_avx2.cc
@@ -15,7 +15,9 @@
 // specific language governing permissions and limitations
 // under the License.
 
+#if defined(ARROW_HAVE_AVX2)
 #include <immintrin.h>
+#endif
 
 #include "arrow/compute/exec/util.h"
 #include "arrow/util/bit_util.h"
diff --git a/cpp/src/arrow/filesystem/api.h b/cpp/src/arrow/filesystem/api.h
index 5b0c97d..4ab104d 100644
--- a/cpp/src/arrow/filesystem/api.h
+++ b/cpp/src/arrow/filesystem/api.h
@@ -23,6 +23,3 @@
 #include "arrow/filesystem/hdfs.h"        // IWYU pragma: export
 #include "arrow/filesystem/localfs.h"     // IWYU pragma: export
 #include "arrow/filesystem/mockfs.h"      // IWYU pragma: export
-#ifdef ARROW_S3
-#include "arrow/filesystem/s3fs.h"  // IWYU pragma: export
-#endif
diff --git a/cpp/src/arrow/filesystem/filesystem.cc b/cpp/src/arrow/filesystem/filesystem.cc
index 6b94d61..0a14816 100644
--- a/cpp/src/arrow/filesystem/filesystem.cc
+++ b/cpp/src/arrow/filesystem/filesystem.cc
@@ -24,9 +24,6 @@
 #ifdef ARROW_HDFS
 #include "arrow/filesystem/hdfs.h"
 #endif
-#ifdef ARROW_S3
-#include "arrow/filesystem/s3fs.h"
-#endif
 #include "arrow/filesystem/localfs.h"
 #include "arrow/filesystem/mockfs.h"
 #include "arrow/filesystem/path_util.h"
@@ -692,14 +689,7 @@ Result<std::shared_ptr<FileSystem>> FileSystemFromUriReal(const Uri& uri,
 #endif
   }
   if (scheme == "s3") {
-#ifdef ARROW_S3
-    RETURN_NOT_OK(EnsureS3Initialized());
-    ARROW_ASSIGN_OR_RAISE(auto options, S3Options::FromUri(uri, out_path));
-    ARROW_ASSIGN_OR_RAISE(auto s3fs, S3FileSystem::Make(options, io_context));
-    return s3fs;
-#else
     return Status::NotImplemented("Got S3 URI but Arrow compiled without S3 support");
-#endif
   }
 
   if (scheme == "mock") {
-- 
2.37.1

